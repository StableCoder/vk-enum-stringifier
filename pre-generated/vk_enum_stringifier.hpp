/**
 * This file was auto-generated by the Vulkan Enum Stringifier
 * that is located at https://github.com/stablecoder/vk-enum-stringifier
 * or https://git.stabletec.com/utilities/vk-enum-stringifier
 *
 * Check for an updated version anytime, or state concerns/bugs.
 */

#ifndef VK_ENUM_STRINGIFIER_HPP
#define VK_ENUM_STRINGIFIER_HPP

#include <cstdint>
#include <string>
#include <string_view>

namespace vkEnum {

// Returns the Vulkan header version the data was generated from
uint32_t vulkanHeaderVersion();

/**
 * @brief Parses a given enum type/value for an enum type
 * @param enumType Vulkan enum typename as a string
 * @param value String of the value to parse
 *
 * Formats the string and attempts to find a match, and returns it. Enums can only match one.
 */
uint32_t parseEnum(std::string_view enumType, std::string value);

/**
 * @brief Parses a given enum type/value(s) for a mask type
 * @param enumType Vulkan enum typename as a string
 * @param value String of the value(s) to parse.
 *
 * Tokenizes the given value string, delimited by '|', and for each token attempts to find the value
 * in the provided enum value set, and if found, OR's it witht eh current return value.
 */
uint32_t parseBitmask(std::string_view enumType, std::string value);

/**
 * @brief Stringifies a given Vk type/value for an enum
 * @param enumType Vulkan enum typename as a string
 * @param enumValue Value to convert into a string
 * @return Short string representing the enum value, or an empty string if not found.
 */
std::string stringifyEnum(std::string_view enumType, uint32_t enumValue);

/**
 * @brief Stringifies a given Vk type/value for a bitmask
 * @param enumType Vulkan enum typename as a string
 * @param enumValue Value to convert into a string
 * @return Short string representing the bitmask values delimited by the '|' symbol, or an empty
 * string if not found.
 */
std::string stringifyBitmask(std::string_view enumType, uint32_t enumValue);

} // namespace vkEnum

#endif // VK_ENUM_STRINGIFIER_HPP
